package data

import "github.com/thetillhoff/eat/pkg/tosca"

// This is the default (root) TOSCA Root Type definition that all complex TOSCA Data Types derive from.
type Root struct {
	tosca.DataTypeRoot `yaml:",inline,omitempty" json:",inline,omitempty"`
}

// The json type is a TOSCA data Type used to define a string that containst data in the JavaScript Object Notation (JSON) format.
type JSON tosca.String

// The xml type is a TOSCA data Type used to define a string that containst data in the Extensible Markup Language (XML) format.
type XML tosca.String

// The Credential type is a complex TOSCA data Type used when describing authorization credentials used to access network accessible resources.
type Credential struct {
	tosca.DataTypeRoot `yaml:",inline,omitempty" json:",inline,omitempty"`

	// The optional protocol name.
	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`

	// [mandatory] The required token type.
	TokenType string `yaml:"token_type,omitempty" json:"token_type,omitempty"`

	// [mandatory] The required token used as a credential for authorization or access to a networked resource.
	Token string `yaml:"token,omitempty" json:"token,omitempty"`

	// The optional map of protocol-specific keys or assertions.
	Keys map[string]string `yaml:"keys,omitempty" json:"keys,omitempty"`

	// The optional user (name or ID) used for non-token based credentials.
	User string `yaml:"user,omitempty" json:"user,omitempty"`
}

// The TimeInterval type is a complex TOSCA data Type used when describing a period of time using the YAML ISO 8601 format to declare the start and end times.
type TimeInterval struct {
	tosca.DataTypeRoot `yaml:",inline,omitempty" json:",inline,omitempty"`

	// [mandatory] The inclusive start time for the time interval.
	StartTime tosca.Timestamp `yaml:"start_time,omitempty" json:"start_time,omitempty"`

	// [mandatory] The inclusive end time for the time interval.
	EndTime tosca.Timestamp `yaml:"end_time,omitempty" json:"end_time,omitempty"`
}

// The Network type is a complex TOSCA data type used to describe logical network information.
type NetworkInfo struct {
	tosca.DataTypeRoot `yaml:",inline,omitempty" json:",inline,omitempty"`

	// The name of the logical network.
	//
	// e.g., “public”, “private”, “admin”. etc.
	NetworkName string `yaml:"network_name,omitempty" json:"network_name,omitempty"`

	// The unique ID of for the network generated by the network provider.
	NetworkId string `yaml:"network_id,omitempty" json:"network_id,omitempty"`

	// The list of IP addresses assigned from the underlying network.
	Addresses []string `yaml:"addresses,omitempty" json:"addresses,omitempty"`
}

// The PortInfo type is a complex TOSCA data type used to describe network port information.
type NetworkPortInfo struct {
	tosca.DataTypeRoot `yaml:",inline,omitempty" json:",inline,omitempty"`

	// The logical network port name.
	PortName string `yaml:"port_name,omitempty" json:"port_name,omitempty"`

	// The unique ID for the network port generated by the network provider.
	PortId string `yaml:"port_id,omitempty" json:"port_id,omitempty"`

	// The unique ID for the network.
	NetworkId string `yaml:"network_id,omitempty" json:"network_id,omitempty"`

	// The unique media access control address (MAC address) assigned to the port.
	MacAddress string `yaml:"mac_address,omitempty" json:"mac_address,omitempty"`

	// The list of IP address(es) assigned to the port.
	Addresses []string `yaml:"addresses,omitempty" json:"addresses,omitempty"`
}

// The PortDef type is a TOSCA data Type used to define a network port.
type NetworkPortDef tosca.Integer

// The PortSpec type is a complex TOSCA data Type used when describing port specifications for a network connection.
//
// A valid PortSpec MUST have at least one of the following properties: target, target_range, source or source_range.
//
// A valid PortSpec MUST have a value for the source property that is within the numeric range specified by the property source_range when source_range is specified.
//
// A valid PortSpec MUST have a value for the target property that is within the numeric range specified by the property target_range when target_range is specified.
type NetworkPortSpec struct {
	tosca.DataTypeRoot `yaml:",inline,omitempty" json:",inline,omitempty"`

	// [mandatory] The required protocol used on the port.
	Protocol string `yaml:"protocol,omitempty" json:"protocol,omitempty"`

	// The optional source port.
	Source NetworkPortDef `yaml:"source,omitempty" json:"source,omitempty"`

	// The optional range for source port.
	SourceRange tosca.Range `yaml:"source_range,omitempty" json:"source_range,omitempty"`

	// The optional target port.
	Target NetworkPortDef `yaml:"target,omitempty" json:"target,omitempty"`

	// The optional range for target port.
	TargetRange tosca.Range `yaml:"target_range,omitempty" json:"target_range,omitempty"`
}
