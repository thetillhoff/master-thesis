tosca_definitions_version: tosca_2_0

profile: org.oasis-open.tosca.simple:2.0 # OR io.kubernetes:1.18

metadata:
  creation_date: 2021-08-16
  date_updated: 2021-08-16
  status: developmental
  template_name: This service template contains all types described in TOSCA simple profile 1.3
  template_author: Till Hoffmann
  template_version: 0.0.1

data_types:
  tosca.datatypes.Root: # taken from tosca simple profile 5.3.1
    description: This is the default (root) TOSCA Root Type definition that all complex TOSCA Data Types derive from.
  
  tosca.datatypes.json: # taken from tosca simple profile 5.3.2
    description: The json type is a TOSCA data Type used to define a string that containst data in the JavaScript Object Notation (JSON) format.
    derived_from: string

  # nothing missing here, 5.3.3 is additional information for 5.3.2

  tosca.datatypes.xml: # taken from tosca simple profile 5.3.4
    description: The xml type is a TOSCA data Type used to define a string that containst data in the Extensible Markup Language (XML) format.
    derived_from: string

  # nothing missing here, 5.3.5 is additional information for 5.3.4

  tosca.datatypes.Credential: # taken from tosca simple profile 5.3.6
    description: The Credential type is a complex TOSCA data Type used when describing authorization credentials used to access network accessible resources.
    derived_from: tosca.datatypes.Root
    properties:
      protocol:
        type: string
        required: false
      token_type:
        type: string
        default: password
      token:
        type: string
      keys:
        type: map
        required: false
        entry_schema:
          type: string
      user:
        type: string
        required: false

  tosca.datatypes.TimeInterval: # taken from tosca simple profile 5.3.7
    description: The TimeInterval type is a complex TOSCA data Type used when describing a period of time using the YAML ISO 8601 format to declare the start and end times.
    derived_from: tosca.datatypes.Root
    properties:
      start_time:
        type: timestamp
        required: true
      end_time:
        type: timestamp
        required: true

  tosca.datatypes.network.NetworkInfo: # taken from tosca simple profile 5.3.8
    description: The Network type is a complex TOSCA data type used to describe logical network information.
    derived_from: tosca.datatypes.Root
    properties:
      network_name:
        type: string
      network_id:
        type: string
      addresses:
        type: list
        entry_schema:
          type: string

  tosca.datatypes.network.PortInfo: # taken from tosca simple profile 5.3.9
    description: The PortInfo type is a complex TOSCA data type used to describe network port information.
    derived_from: tosca.datatypes.Root
    properties:
      port_name:
        type: string
      port_id:
        type: string
      network_id:
        type: string
      mac_address:
        type: string
      addresses:
        type: list
        entry_schema:
          type: string

  tosca.datatypes.network.PortDef: # taken from tosca simple profile 5.3.10
    description: The PortDef type is a TOSCA data Type used to define a network port.
    derived_from: integer
    constraints:
      - in_range: [ 1, 65535 ]

  tosca.datatypes.network.PortSpec: # taken from tosca simple profile 5.3.11
    description: The PortSpec type is a complex TOSCA data Type used when describing port specifications for a network connection.
    derived_from: tosca.datatypes.Root
    properties:
      protocol:
        type: string
        required: true
        default: tcp
        constraints:
          - valid_values: [ udp, tcp, igmp ]
      target:
        type: PortDef
        required: false
      target_range:
        type: range
        required: false
        constraints:
          - in_range: [ 1, 65535 ]
      source:
        type: PortDef
        required: false
      source_range:
        type: range
        required: false
        constraints:
          - in_range: [ 1, 65535 ]

artifact_types:
  tosca.artifacts.Root: # taken from tosca simple profile 5.4.1
    description: This is the default (root) TOSCA Artifact Type definition that all other TOSCA base Artifact Types derive from.
  
  tosca.artifacts.File: # taken from tosca simple profile 5.4.2
    description: This artifact type is used when an artifact definition needs to have its associated file simply treated as a file and no special handling/handlers are invoked (i.e., it is not treated as either an implementation or deployment artifact type).
    derived_from: tosca.artifacts.Root

  tosca.artifacts.Deployment: # taken from tosca simple profile 5.4.3
    description: This artifact type represents the parent type for all deployment artifacts in TOSCA. This class of artifacts typically represents a binary packaging of an application or service that is used to install/create or deploy it as part of a node’s lifecycle.
    derived_from: tosca.artifacts.Root

  tosca.artifacts.Deployment.Image: # taken from tosca simple profile 5.4.3.3
    description: This artifact type represents a parent type for any "image" which is an opaque packaging of a TOSCA Node’s deployment (whether real or virtual) whose contents are typically already installed and pre-configured (i.e., "stateful") and prepared to be run on a known target container.
    derived_from: tosca.artifacts.Deployment

  tosca.artifacts.Deployment.Image.VM: # taken from tosca simple profile 5.4.3.4
    description: This artifact represents the parent type for all Virtual Machine (VM) image and container formatted deployment artifacts. These images contain a stateful capture of a machine (e.g., server) including operating system and installed software along with any configurations and can be run on another machine using a hypervisor which virtualizes typical server (i.e., hardware) resources.
    derived_from: tosca.artifacts.Deployment.Image

  tosca.artifacts.Implementation: # taken from tosca simple profile 5.4.4.1
    description: This artifact type represents the parent type for all implementation artifacts in TOSCA. These artifacts are used to implement operations of TOSCA interfaces either directly (e.g., scripts) or indirectly (e.g., config. files).
    derived_from: tosca.artifacts.Root

  tosca.artifacts.Implementation.Bash: # taken from tosca simple profile 5.4.4.3
    description: This artifact type represents a Bash script type that contains Bash commands that can be executed on the Unix Bash shell.
    derived_from: tosca.artifacts.Implementation
    mime_type: application/x-sh
    file_ext: [ sh ]
  
  tosca.artifacts.Implementation.Python: # taken from tosca simple profile 5.4.4.4
    description: This artifact type represents a Python file that contains Python language constructs that can be executed within a Python interpreter.
    derived_from: tosca.artifacts.Implementation
    mime_type: application/x-python
    file_ext: [ py ]

  tosca.artifacts.template: # taken from tosca simple profile 5.4.5.1
    description: >
      This artifact type represents the parent type for all template type artifacts in TOSCA. This class of artifacts typically represent template files that are dependent artifacts for implementation of an interface or deployment of a node.
      Like the case of other dependent artifacts, the TOSCA orchestrator copies the dependent artifacts to the same location as the primary artifact for its access during execution. However, the template artifact processor need not be deployed in the environment where the primary artifact executes. At run time, the Orchestrator can invoke the artifact processor (i.e. template engine) to fill in run time values and provide the "filled template" to the primary artifact processor for further processing. 
      This reduces the requirements on the primary artifact target environment and the processing time of template artifacts.
    derived_from: tosca.artifacts.Root

capability_types:
  tosca.capabilities.Root: # taken from tosca simple profile 5.5.1
    description: This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.

  tosca.capabilities.Node: # taken from tosca simple profile 5.5.2
    description: The Node capability indicates the base capabilities of a TOSCA Node Type.
    derived_from: tosca.capabilities.Root
  
  tosca.capabilities.Compute: # taken from tosca simple profile 5.5.3
    description: The Compute capability, when included on a Node Type or Template definition, indicates that the node can provide hosting on a named compute resource.
    derived_from: tosca.capabilities.Container
    properties:
      name:
        type: string
        required: false
      num_cpus:
        type: integer
        required: false
        constraints:
          - greater_or_equal: 1
      cpu_frequency:
        type: scalar-unit.frequency
        required: false
        constraints:
          - greater_or_equal: 0.1 GHz
      disk_size:
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB
      mem_size:
        type: scalar-unit.size
        required: false
        constraints:
          - greater_or_equal: 0 MB

  tosca.capabilities.Network: # taken from tosca simple profile 5.5.4
    description: The Storage capability, when included on a Node Type or Template definition, indicates that the node can provide addressiblity for the resource a named network with the specified ports.
    derived_from: tosca.capabilities.Root
    properties:
      name:
        type: string
        required: false

  tosca.capabilities.Storage: # taken from tosca simple profile 5.5.5
    description: The Storage capability, when included on a Node Type or Template definition, indicates that the node can provide a named storage location with specified size range.
    derived_from: tosca.capabilities.Root
    properties:
      name:
        type: string
        required: false

  tosca.capabilities.Container: # taken from tosca simple profile 5.5.6
    description: The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.
    derived_from: tosca.capabilities.Root

  tosca.capabilities.Endpoint: # taken from tosca simple profile 5.5.7
    description: This is the default TOSCA type that should be used or extended to define a network endpoint capability. This includes the information to express a basic endpoint with a single port or a complex endpoint with multiple ports.  By default the Endpoint is assumed to represent an address on a private network unless otherwise specified.
    derived_from: tosca.capabilities.Root
    properties:
      protocol:
        type: string
        required: true
        default: tcp
      port: # either port or ports has to be filled -> why not unify to ports with min-length of one? doesnt make sense
        type: PortDef
        required: false
      secure:
        type: boolean
        required: false
      url_path:
        type: string
        required: false
      port_name: # ?
        type: string
        required: false
      network_name: # ?
        type: string
        required: false
        default: PRIVATE
      initiator: # ?
        type: string
        required: false
        default: source
        constraints:
          - valid_values: [ source, target, peer ]
      ports: # map? named map? why no list and have description?
        type: map
        required: false
        constraints:
          - min_length: 1
        entry_schema:
          type: PortSpec
    attributes:
      ip_address:
        type: string
  
  tosca.capabilities.Endpoint.Public: # taken from tosca simple profile 5.5.8
    description: >
      This capability represents a public endpoint which is accessible to the general internet (and its public IP address ranges).
      This public endpoint capability also can be used to create a floating (IP) address that the underlying network assigns from a pool allocated from the application’s underlying public network.  This floating address is managed by the underlying network such that can be routed an application’s private address and remains reliable to internet clients.
    derived_from: tosca.capabilities.Endpoint
    properties:
      # Change the default network_name to use the first public network found
      network_name:
        type: string
        default: PUBLIC
        constraints:
          - equal: PUBLIC
      floating:
        description: >
          indicates that the public address should be allocated from a pool of floating IPs that are associated with the network.
        type: boolen
        default: false
        status: experimental
      dns_name: # if set, orchestrator should register dns-entry at dns-registry automatically
        description: The optional name to register with DNS
        type: string
        required: false
        status: experimental

  tosca.capabilities.Endpoint.Admin: # taken from tosca simple profile 5.5.9
    description: This is the default TOSCA type that should be used or extended to define a specialized administrator endpoint capability.
    derived_from: tosca.capabilities.Endpoint
    # Change Endpoint secure indicator to true from its default value of false
    properties:
      secure:
        type: boolean
        default: true
        constraints:
          - equal: true

  tosca.capabilities.Endpoint.Database: # taken from tosca simple profile 5.5.10
  # why is this necessary? could just be endpoint?
    description: This is the default TOSCA type that should be used or extended to define a specialized database endpoint capability.
    derived_from: tosca.capabilities.Endpoint

  tosca.capabilities.Attachment: # taken from tosca simple profile 5.5.11
    description: This is the default TOSCA type that should be used or extended to define an attachment capability of a (logical) infrastructure device node (e.g., BlockStorage node).
    derived_from: tosca.capabilities.Root

  tosca.capabilities.OperatingSystem: # taken from tosca simple profile 5.5.12
    description: This is the default TOSCA type that should be used to express an Operating System capability for a node.  
    derived_from: tosca.capabilities.Root
    properties:
      architecture:
        type: string
        required: false

  tosca.capabilities.Scalable: # taken from tosca simple profile 5.5.13
    description: This is the default TOSCA type that should be used to express a scalability capability for a node.  
    derived_from: tosca.capabilities.Root
    properties:
      min_instances:
        type: integer
        default: 1
      max_instances:
        type: integer
        default: 1
      default_instances:
        type: integer
  
  tosca.capabilities.Bindable: # taken from tosca simple profile 5.5.14
    description: A node type that includes the Bindable capability indicates that it can be bound to a logical network association via a network port.
    derived_from: tosca.capabilities.Node

# There is no 5.6 as there are no requirement types in TOSCA simple profile 1.3
# But the requirements should be described against the known capability types.
# -> TBD in spec

relationship_types:
  tosca.relationships.Root: # taken from tosca simple profile 5.7.1
    description: This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.
    derive_from: #TBD
    attributes:
      tosca_id:
        type: string
      tosca_name:
        type: string
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
  
  tosca.relationships.DependsOn: # taken from tosca simple profile 5.7.2
    description: This type represents a general dependency relationship between two nodes.
    derived_from: tosca.relationships.Root

  tosca.relationships.HostedOn: # taken from tosca simple profile 5.7.3
    description: This type represents a hosting relationship between two nodes.
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilites.Container ]

  tosca.relationships.ConnectsTo: # taken from tosca simple profile 5.7.4
    description: This type represents a network connection relationship between two nodes.
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilities.Endpoint ]
    properties:
      credential:
        type: tosca.datatypes.Credential
        required: false

  tosca.relationships.AttachesTo: # taken from tosca simple profile 5.7.5
    description: This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.
    derived_from: tosca.relationships.Root
    valid_target_types: [ tosca.capabilities.Attachment ]
    properties:
      location:
        type: string
        constraints:
          - min_length: 1
      device:
        type: string
        required: false

  tosca.relationships.RoutesTo: # taken from tosca simple profile 5.7.6
    description: This type represents an intentional network routing between two Endpoints in different networks.
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [ tosca.capabilities.Endpoint ]

interface_types:
  tosca.interfaces.Root: # taken from tosca simple profile 5.8.3 (earlier subchapters don't contain types)
    description: This is the default (root) TOSCA Interface Type definition that all other TOSCA Interface Types derive from.
    #derived_from: tosca.entity.Root # WTF THIS IS NEVER DEFINED ?! # TODO

  tosca.interfaces.node.lifecycle.Standard: # taken from tosca simple profile 5.8.4
    description: This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.
    derived_from: tosca.interfaces.Root
    create:
      description: > 
        Standard lifecycle create operation.
        The create operation is generally used to create the resource or service the node represents in the topology.
        TOSCA orchestrators expect node templates to provide either a deployment artifact or an implementation artifact of a defined artifact type that it is able to process.
        This specification defines normative deployment and implementation artifact types all TOSCA Orchestrators are expected to be able to process to support application portability.
    configure:
      description: Standard lifecycle configure operation. See create.description.
    start:
      description: Standard lifecycle start operation. See create.description.
    stop:
      description: Standard lifecycle stop operation. See create.description.
    delete:
      description: Standard lifecycle delete operation. See create.description.

  tosca.interfaces.relationship.Configure: # taken from tosca simple profile 5.8.5
    description: The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.
    derived_from: tosca.interfaces.Root
    pre_configure_source:
      description: Operation to pre-configure the source endpoint.
    pre_configure_target:
      description: Operation to pre-configure the target endpoint.
    post_configure_source:
      description: Operation to post-configure the source endpoint.
    post_configure_target:
      description: Operation to post-configure the target endpoint.
    add_target:
      description: Operation to notify the source node of a target node being added via a relationship.
    add_source:
      description: Operation to notify the target node of a source node which is now available via a relationship.
    target_changed:
      description: Operation to notify source some property or attribute of the target changed.
    remove_target:
      description: Operation to remove a target node.


  # mycompany.interfaces.service.Signal:
  #   operations:
  #     signal_begin_receive:
  #       description: Operation to signal start of some message processing.
  #     signal_end_receive:
  #       description: Operation to signal end of some message processed.
  # mycompany.mytypes.myinterfaces.MyConfigure:
  #   derived_from: tosca.interfaces.relationship.Root
  #   description: My custom configure Interface Type
  #   inputs:
  #     mode:
  #       type: string
  #   operations:
  #     pre_configure_service:
  #       description: pre-configure operation for my service
  #     post_configure_service:
  #       description: post-configure operation for my service

node_types:
  tosca.nodes.Root: # taken from tosca simple profile 5.9.1
    description: The TOSCA Node Type all other TOSCA base Node Types derive from
    #derived_from: tosca.entity.Root # ??? THIS IS NEVER EVER DEFINED ANYWHERE IN EITHER SPEC & other .Root types are not derived from anything
    attributes:
      tosca_id:
        type: string
      tosca_name:
        type: string
      state:
        type: string
    capabilities:
      feature:
        type: tosca.capabilities.Node
    requirements:
      - dependency:
          capability: tosca.capabilities.Node
          node: tosca.nodes.Root
          relationship: tosca.relationships.DependsOn
          occurences: [ 0, UNBOUNDED ]

  tosca.nodes.Abstract.Compute: # taken from tosca simple profile 5.9.2
    description: The TOSCA Abstract.Compute node represents an abstract compute resource without any requirements on storage or network resources.
    derived_from: tosca.nodes.Root
    capabilities:
      host:
        type: tosca.capabilities.Compute
        valid_source_types: []

  tosca.nodes.Compute: # taken from tosca simple profile 5.9.3
    description: The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources.  Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) "server".
    derived_from: tosca.nodes.Abstract.Compute
    attributes:
      private_address:
        type: string
      public_address:
        type: string
      networks:
        type: map
        entry_schema:
          type: tosca.datatypes.network.NetworkInfo
      ports:
        type: map
        entry_schema:
          type: tosca.datatypes.network.PortInfo
    requirements:
      - local_storage:
          capability: tosca.capabilities.Attachment
          node: tosca.nodes.Storage.BlockStorage
          relationship: tosca.relationships.AttachesTo
          occurrences: [0, UNBOUNDED]  
    capabilities:
      host:
        type: tosca.capabilities.Compute
        valid_source_types: [tosca.nodes.SoftwareComponent]
      endpoint:
        type: tosca.capabilities.Endpoint.Admin
      os:
        type: tosca.capabilities.OperatingSystem
      scalable:
        type: tosca.capabilities.Scalable
      binding:
        type: tosca.capabilities.network.Bindable

  tosca.nodes.SoftwareComponent: # taken from tosca simple profile 5.9.4
    description: The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.
    derived_from: tosca.nodes.Root
    properties:
      # domain-specific software component version
      component_version:
        type: version
        required: false
      admin_credential:
        type: tosca.datatypes.Credential
        required: false
    requirements:
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
  
  tosca.nodes.WebServer: # taken from tosca simple profile 5.9.5
    description: This TOSA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      data_endpoint: tosca.capabilities.Endpoint
      #admin_endpoint: tosca.capabilities.Endpoint.Admin # not needed here
      host:
        type: tosca.capabilities.Compute
        valid_source_types: [ tosca.nodes.WebApplication ]

  tosca.nodes.WebApplication: # originally taken from tosca simple profile 5.9.6 but altered a lot
    description: The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.
    derived_from: tosca.nodes.Root
    properties:
      scheme:
        type: string
        required: false
        default: http
        description: >
          Defines which scheme/protocol this webapp uses.
          Example:
          A value of "https" would result in a webapp reachable at "https://<host>:<port>/<path>"
      host: # == domain
        type: string
        required: true
        description: >
          The web application’s context root which designates the application’s URL path within the web server it is hosted on.
          Example:
          A value of "somedomain.tld" would result in a webapp reachable at "somedomain.tld:<port>/thisapp/".
      port:
        type: integer
        required: false
        default: 80
      path:
        type: string
        required: true
        description: >
          The web application’s context root which designates the application’s URL path within the web server it is hosted on.
          Example:
          A value of "thisapp/" would result in a webapp reachable at "<host>:<port>/thisapp/".
    artifacts:
      index.html: #TODO
    requirements:
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.WebServer
          relationship: tosca.relationships.HostedOn

  tosca.nodes.DBMS: # taken from tosca simple profile 5.9.7
    description: The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      root_password:
        type: string
        required: false
        description: The optional root password for the DBMS service.
      port:
        type: integer
        required: false
        description: The port othe DBMS service will listen to for connections. Default varies per DBMS.
      capabilities:
        host:
          type: tosca.capabilities.Compute
          valid_source_types: [tosca.nodes.Database]

  tosca.nodes.Database : # taken from tosca simple profile 5.9.8
    description: The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.
    derived_from: tosca.nodes.Root
    properties:
      name:
        type: string
        description: The logical name of the database
      port:
        type: integer
        description: The port the underlying database service will listen for connections
      user:
        type: string
        description: The optional user account name for DB administration
        required: false
      password:
        type: string
        description: The optional password for the DB user
    requirements:
      - host:
          capability: tosca.capabilites.Compute
          node: tosca.nodes.DBMS
          relationship: tosca.relationships.HostedOn
    capabilities:
      database_endpoint:
        type: tosca.capabilities.Endpoint.Database

  tosca.nodes.Abstract.Storage: # taken from tosca simple profile 5.9.9
    description: The TOSCA Abstract.Storage node represents an abstract storage resource without any requirements on compute or network resources.
    derived_from: tosca.nodes.Root
    properties:
      name:
        type: string
      size:
        type: scalar-unit.size
        default: 0 MB
        constraints:
          - greater_or_equal: 0 MB
    capabilities: #TBD (stated like this in the spec)

  tosca.nodes.Storage.ObjectStorage: # taken from tosca simple profile 5.9.10
    description: The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.
    derived_from: tosca.nodes.Abstract.Storage
    properties:
      maxsize:
        type: scalar-unit.size
        constraints:
          - greater_or_equal: 0 GB
    capabilities:
      storage_endpoint:
        type: tosca.capabilities.Endpoint

  tosca.nodes.Storage.BlockStorage: # taken from tosca simple profile 5.9.11
    description: >
      The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.
      Note: In this draft of the TOSCA Simple Profile, distributed or Network Attached Storage (NAS) are not yet considered (nor are clustered file systems), but the TC plans to do so in future drafts. 
    derived_from: tosca.nodes.Abstract.Storage
    properties:
      volume_id:
        type: string
        required: false
      snapshot_id:
        type: string
        required: false
    capabilities:
      attachement:
        type: tosca.capabilities.Attachment

  tosca.nodes.Container.Runtime: # taken from tosca simple profile 5.9.12
    description: The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      host:
        type: tosca.capabilities.Compute
        valid_source_types: [ tosca.nodes.Container.Application ]
      scalable:
        type: tosca.capabilities.Scalable

  tosca.nodes.Container.Application: # taken from tosca simple profile 5.9.13
    description: The TOSCA Container Application node represents an application that requires Container-level virtualization technology.
    derived_from: tosca.nodes.Root
    requirements:
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.Container.Runtime
          relationship: tosca.relationships.HostedOn
      - storage:
          capability: tosca.capabilities.Storage # This is a requirement on the Container.Runtime node, not on the Application side!
      - network:
          capability: tosca.capabilites.Endpoint

  tosca.nodes.LoadBalancer: # taken from tosca simple profile 5.9.14
    description:
    derived_from: tosca.nodes.Root
    properties:
      algorithms:
        type: string
        required: false
        status: experimental
    capabilities:
      client:
        description: The Floating (IP) client's on the public network can connect to
        type: tosca.capabilities.Endpoint.Public
        occurences: [ 0, UNBOUNDED ]
    requirements:
      - application:
          description: Connection to one or more load balanced applications
          capability: tosca.capabilities.Endpoint
          relationship: tosca.relationships.RoutesTo
          occurences: [ 0, UNBOUNDED ]

group_types:
  tosca.groups.Root: # taken from tosca simple profile 5.10.1
    description: This is the default (root) TOSCA Group Type definition that all other TOSCA base Group Types derive from.
    interfaces:
      Standard:
        type: tosca.interfaces.nodes.lifecycle.Standard
  
policy_types:
  tosca.policies.Root: # taken from tosca simple profile 5.11.1
    description: This is the default (root) TOSCA Policy Type definition that all other TOSCA base Policy Types derive from.

  tosca.policies.Placement: # taken from tosca simple profile 5.11.2
    description: This is the default (root) TOSCA Policy Type definition that is used to govern placement of TOSCA nodes or groups of nodes.  
    derived_from: tosca.policies.Root

  tosca.policies.Scaling: # taken from tosca simple profile 5.11.3
    description: This is the default (root) TOSCA Policy Type definition that is used to govern scaling of TOSCA nodes or groups of nodes.  
    derived_from: tosca.policies.Root

  tosca.policies.Update: # taken from tosca simple profile 5.11.4
    description: This is the default (root) TOSCA Policy Type definition that is used to govern update of TOSCA nodes or groups of nodes.
    derived_from: tosca.policies.Root
  
  tosca.policies.Performance: # taken from tosca simple profile 5.11.5
    description: This is the default (root) TOSCA Policy Type definition that is used to declare performance requirements for TOSCA nodes or groups of nodes.
    derived_from: tosca.policies.Root
